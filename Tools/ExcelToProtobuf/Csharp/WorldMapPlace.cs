// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: WorldMap_Place.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Deploy {

  /// <summary>Holder for reflection information generated from WorldMap_Place.proto</summary>
  public static partial class WorldMapPlaceReflection {

    #region Descriptor
    /// <summary>File descriptor for WorldMap_Place.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static WorldMapPlaceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRXb3JsZE1hcF9QbGFjZS5wcm90bxIGZGVwbG95IqoCCg5Xb3JsZE1hcF9Q",
            "bGFjZRIKCgJJZBgBIAEoBRIMCgROYW1lGAIgASgJEg0KBUxldmVsGAMgASgF",
            "EhAKCExhbmRmb3JtGAQgASgFEhMKC1BoeXNpb2dub215GAUgASgFEg8KB0Ns",
            "aW1hdGUYBiABKAUSEwoLUGVjdWxpYXJpdHkYByADKAUSEAoIQnVpbGRpbmcY",
            "CCADKAUSDwoHQ291bnRyeRgJIAEoBRINCgVSb2FkcxgKIAMoBRIMCgRBcmVh",
            "GAsgASgFEhEKCUNvbnRpbmVudBgMIAEoBRIPCgdTdGVsbGFyGA0gASgFEhYK",
            "Dk1haW5Qb3B1bGF0aW9uGA4gAygJEhAKCERlc2NyaWJlGA8gASgJEhQKDFBs",
            "YWNlVXNlVHlwZRgQIAEoBSKQAQoSV29ybGRNYXBfUGxhY2VfTWFwEjQKBUl0",
            "ZW1zGAEgAygLMiUuZGVwbG95LldvcmxkTWFwX1BsYWNlX01hcC5JdGVtc0Vu",
            "dHJ5GkQKCkl0ZW1zRW50cnkSCwoDa2V5GAEgASgFEiUKBXZhbHVlGAIgASgL",
            "MhYuZGVwbG95LldvcmxkTWFwX1BsYWNlOgI4AWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Deploy.WorldMap_Place), global::Deploy.WorldMap_Place.Parser, new[]{ "Id", "Name", "Level", "Landform", "Physiognomy", "Climate", "Peculiarity", "Building", "Country", "Roads", "Area", "Continent", "Stellar", "MainPopulation", "Describe", "PlaceUseType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Deploy.WorldMap_Place_Map), global::Deploy.WorldMap_Place_Map.Parser, new[]{ "Items" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, })
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class WorldMap_Place : pb::IMessage<WorldMap_Place> {
    private static readonly pb::MessageParser<WorldMap_Place> _parser = new pb::MessageParser<WorldMap_Place>(() => new WorldMap_Place());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WorldMap_Place> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Deploy.WorldMapPlaceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorldMap_Place() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorldMap_Place(WorldMap_Place other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      level_ = other.level_;
      landform_ = other.landform_;
      physiognomy_ = other.physiognomy_;
      climate_ = other.climate_;
      peculiarity_ = other.peculiarity_.Clone();
      building_ = other.building_.Clone();
      country_ = other.country_;
      roads_ = other.roads_.Clone();
      area_ = other.area_;
      continent_ = other.continent_;
      stellar_ = other.stellar_;
      mainPopulation_ = other.mainPopulation_.Clone();
      describe_ = other.describe_;
      placeUseType_ = other.placeUseType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorldMap_Place Clone() {
      return new WorldMap_Place(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 3;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "Landform" field.</summary>
    public const int LandformFieldNumber = 4;
    private int landform_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Landform {
      get { return landform_; }
      set {
        landform_ = value;
      }
    }

    /// <summary>Field number for the "Physiognomy" field.</summary>
    public const int PhysiognomyFieldNumber = 5;
    private int physiognomy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Physiognomy {
      get { return physiognomy_; }
      set {
        physiognomy_ = value;
      }
    }

    /// <summary>Field number for the "Climate" field.</summary>
    public const int ClimateFieldNumber = 6;
    private int climate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Climate {
      get { return climate_; }
      set {
        climate_ = value;
      }
    }

    /// <summary>Field number for the "Peculiarity" field.</summary>
    public const int PeculiarityFieldNumber = 7;
    private static readonly pb::FieldCodec<int> _repeated_peculiarity_codec
        = pb::FieldCodec.ForInt32(58);
    private readonly pbc::RepeatedField<int> peculiarity_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Peculiarity {
      get { return peculiarity_; }
    }

    /// <summary>Field number for the "Building" field.</summary>
    public const int BuildingFieldNumber = 8;
    private static readonly pb::FieldCodec<int> _repeated_building_codec
        = pb::FieldCodec.ForInt32(66);
    private readonly pbc::RepeatedField<int> building_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Building {
      get { return building_; }
    }

    /// <summary>Field number for the "Country" field.</summary>
    public const int CountryFieldNumber = 9;
    private int country_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Country {
      get { return country_; }
      set {
        country_ = value;
      }
    }

    /// <summary>Field number for the "Roads" field.</summary>
    public const int RoadsFieldNumber = 10;
    private static readonly pb::FieldCodec<int> _repeated_roads_codec
        = pb::FieldCodec.ForInt32(82);
    private readonly pbc::RepeatedField<int> roads_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Roads {
      get { return roads_; }
    }

    /// <summary>Field number for the "Area" field.</summary>
    public const int AreaFieldNumber = 11;
    private int area_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Area {
      get { return area_; }
      set {
        area_ = value;
      }
    }

    /// <summary>Field number for the "Continent" field.</summary>
    public const int ContinentFieldNumber = 12;
    private int continent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Continent {
      get { return continent_; }
      set {
        continent_ = value;
      }
    }

    /// <summary>Field number for the "Stellar" field.</summary>
    public const int StellarFieldNumber = 13;
    private int stellar_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Stellar {
      get { return stellar_; }
      set {
        stellar_ = value;
      }
    }

    /// <summary>Field number for the "MainPopulation" field.</summary>
    public const int MainPopulationFieldNumber = 14;
    private static readonly pb::FieldCodec<string> _repeated_mainPopulation_codec
        = pb::FieldCodec.ForString(114);
    private readonly pbc::RepeatedField<string> mainPopulation_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> MainPopulation {
      get { return mainPopulation_; }
    }

    /// <summary>Field number for the "Describe" field.</summary>
    public const int DescribeFieldNumber = 15;
    private string describe_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Describe {
      get { return describe_; }
      set {
        describe_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PlaceUseType" field.</summary>
    public const int PlaceUseTypeFieldNumber = 16;
    private int placeUseType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlaceUseType {
      get { return placeUseType_; }
      set {
        placeUseType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WorldMap_Place);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WorldMap_Place other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Level != other.Level) return false;
      if (Landform != other.Landform) return false;
      if (Physiognomy != other.Physiognomy) return false;
      if (Climate != other.Climate) return false;
      if(!peculiarity_.Equals(other.peculiarity_)) return false;
      if(!building_.Equals(other.building_)) return false;
      if (Country != other.Country) return false;
      if(!roads_.Equals(other.roads_)) return false;
      if (Area != other.Area) return false;
      if (Continent != other.Continent) return false;
      if (Stellar != other.Stellar) return false;
      if(!mainPopulation_.Equals(other.mainPopulation_)) return false;
      if (Describe != other.Describe) return false;
      if (PlaceUseType != other.PlaceUseType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Landform != 0) hash ^= Landform.GetHashCode();
      if (Physiognomy != 0) hash ^= Physiognomy.GetHashCode();
      if (Climate != 0) hash ^= Climate.GetHashCode();
      hash ^= peculiarity_.GetHashCode();
      hash ^= building_.GetHashCode();
      if (Country != 0) hash ^= Country.GetHashCode();
      hash ^= roads_.GetHashCode();
      if (Area != 0) hash ^= Area.GetHashCode();
      if (Continent != 0) hash ^= Continent.GetHashCode();
      if (Stellar != 0) hash ^= Stellar.GetHashCode();
      hash ^= mainPopulation_.GetHashCode();
      if (Describe.Length != 0) hash ^= Describe.GetHashCode();
      if (PlaceUseType != 0) hash ^= PlaceUseType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Level);
      }
      if (Landform != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Landform);
      }
      if (Physiognomy != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Physiognomy);
      }
      if (Climate != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Climate);
      }
      peculiarity_.WriteTo(output, _repeated_peculiarity_codec);
      building_.WriteTo(output, _repeated_building_codec);
      if (Country != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Country);
      }
      roads_.WriteTo(output, _repeated_roads_codec);
      if (Area != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Area);
      }
      if (Continent != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(Continent);
      }
      if (Stellar != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(Stellar);
      }
      mainPopulation_.WriteTo(output, _repeated_mainPopulation_codec);
      if (Describe.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Describe);
      }
      if (PlaceUseType != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(PlaceUseType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Landform != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Landform);
      }
      if (Physiognomy != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Physiognomy);
      }
      if (Climate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Climate);
      }
      size += peculiarity_.CalculateSize(_repeated_peculiarity_codec);
      size += building_.CalculateSize(_repeated_building_codec);
      if (Country != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Country);
      }
      size += roads_.CalculateSize(_repeated_roads_codec);
      if (Area != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Area);
      }
      if (Continent != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Continent);
      }
      if (Stellar != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Stellar);
      }
      size += mainPopulation_.CalculateSize(_repeated_mainPopulation_codec);
      if (Describe.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Describe);
      }
      if (PlaceUseType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PlaceUseType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WorldMap_Place other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Landform != 0) {
        Landform = other.Landform;
      }
      if (other.Physiognomy != 0) {
        Physiognomy = other.Physiognomy;
      }
      if (other.Climate != 0) {
        Climate = other.Climate;
      }
      peculiarity_.Add(other.peculiarity_);
      building_.Add(other.building_);
      if (other.Country != 0) {
        Country = other.Country;
      }
      roads_.Add(other.roads_);
      if (other.Area != 0) {
        Area = other.Area;
      }
      if (other.Continent != 0) {
        Continent = other.Continent;
      }
      if (other.Stellar != 0) {
        Stellar = other.Stellar;
      }
      mainPopulation_.Add(other.mainPopulation_);
      if (other.Describe.Length != 0) {
        Describe = other.Describe;
      }
      if (other.PlaceUseType != 0) {
        PlaceUseType = other.PlaceUseType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Level = input.ReadInt32();
            break;
          }
          case 32: {
            Landform = input.ReadInt32();
            break;
          }
          case 40: {
            Physiognomy = input.ReadInt32();
            break;
          }
          case 48: {
            Climate = input.ReadInt32();
            break;
          }
          case 58:
          case 56: {
            peculiarity_.AddEntriesFrom(input, _repeated_peculiarity_codec);
            break;
          }
          case 66:
          case 64: {
            building_.AddEntriesFrom(input, _repeated_building_codec);
            break;
          }
          case 72: {
            Country = input.ReadInt32();
            break;
          }
          case 82:
          case 80: {
            roads_.AddEntriesFrom(input, _repeated_roads_codec);
            break;
          }
          case 88: {
            Area = input.ReadInt32();
            break;
          }
          case 96: {
            Continent = input.ReadInt32();
            break;
          }
          case 104: {
            Stellar = input.ReadInt32();
            break;
          }
          case 114: {
            mainPopulation_.AddEntriesFrom(input, _repeated_mainPopulation_codec);
            break;
          }
          case 122: {
            Describe = input.ReadString();
            break;
          }
          case 128: {
            PlaceUseType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WorldMap_Place_Map : pb::IMessage<WorldMap_Place_Map> {
    private static readonly pb::MessageParser<WorldMap_Place_Map> _parser = new pb::MessageParser<WorldMap_Place_Map>(() => new WorldMap_Place_Map());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WorldMap_Place_Map> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Deploy.WorldMapPlaceReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorldMap_Place_Map() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorldMap_Place_Map(WorldMap_Place_Map other) : this() {
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorldMap_Place_Map Clone() {
      return new WorldMap_Place_Map(this);
    }

    /// <summary>Field number for the "Items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pbc::MapField<int, global::Deploy.WorldMap_Place>.Codec _map_items_codec
        = new pbc::MapField<int, global::Deploy.WorldMap_Place>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::Deploy.WorldMap_Place.Parser), 10);
    private readonly pbc::MapField<int, global::Deploy.WorldMap_Place> items_ = new pbc::MapField<int, global::Deploy.WorldMap_Place>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::Deploy.WorldMap_Place> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WorldMap_Place_Map);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WorldMap_Place_Map other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Items.Equals(other.Items)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Items.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _map_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_map_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WorldMap_Place_Map other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            items_.AddEntriesFrom(input, _map_items_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
