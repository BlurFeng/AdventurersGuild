// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Skill_Config.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Deploy {

  /// <summary>Holder for reflection information generated from Skill_Config.proto</summary>
  public static partial class SkillConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for Skill_Config.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SkillConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJTa2lsbF9Db25maWcucHJvdG8SBmRlcGxveSKWAQoMU2tpbGxfQ29uZmln",
            "EgoKAklkGAEgASgFEg8KB0ZhY3Rpb24YAiABKAUSDAoEVHlwZRgDIAEoBRIM",
            "CgRSYW5rGAQgASgFEg8KB0VsZW1lbnQYBSADKAUSDAoETmFtZRgGIAEoCRIS",
            "CgpBY3RpdmVUeXBlGAcgASgFEgwKBEljb24YCCABKAkSDAoERGVzYxgJIAEo",
            "CSKKAQoQU2tpbGxfQ29uZmlnX01hcBIyCgVJdGVtcxgBIAMoCzIjLmRlcGxv",
            "eS5Ta2lsbF9Db25maWdfTWFwLkl0ZW1zRW50cnkaQgoKSXRlbXNFbnRyeRIL",
            "CgNrZXkYASABKAUSIwoFdmFsdWUYAiABKAsyFC5kZXBsb3kuU2tpbGxfQ29u",
            "ZmlnOgI4AWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Deploy.Skill_Config), global::Deploy.Skill_Config.Parser, new[]{ "Id", "Faction", "Type", "Rank", "Element", "Name", "ActiveType", "Icon", "Desc" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Deploy.Skill_Config_Map), global::Deploy.Skill_Config_Map.Parser, new[]{ "Items" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, })
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Skill_Config : pb::IMessage<Skill_Config> {
    private static readonly pb::MessageParser<Skill_Config> _parser = new pb::MessageParser<Skill_Config>(() => new Skill_Config());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Skill_Config> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Deploy.SkillConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Skill_Config() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Skill_Config(Skill_Config other) : this() {
      id_ = other.id_;
      faction_ = other.faction_;
      type_ = other.type_;
      rank_ = other.rank_;
      element_ = other.element_.Clone();
      name_ = other.name_;
      activeType_ = other.activeType_;
      icon_ = other.icon_;
      desc_ = other.desc_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Skill_Config Clone() {
      return new Skill_Config(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Faction" field.</summary>
    public const int FactionFieldNumber = 2;
    private int faction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Faction {
      get { return faction_; }
      set {
        faction_ = value;
      }
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 3;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "Rank" field.</summary>
    public const int RankFieldNumber = 4;
    private int rank_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    /// <summary>Field number for the "Element" field.</summary>
    public const int ElementFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_element_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> element_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Element {
      get { return element_; }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 6;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ActiveType" field.</summary>
    public const int ActiveTypeFieldNumber = 7;
    private int activeType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActiveType {
      get { return activeType_; }
      set {
        activeType_ = value;
      }
    }

    /// <summary>Field number for the "Icon" field.</summary>
    public const int IconFieldNumber = 8;
    private string icon_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Icon {
      get { return icon_; }
      set {
        icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Desc" field.</summary>
    public const int DescFieldNumber = 9;
    private string desc_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Desc {
      get { return desc_; }
      set {
        desc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Skill_Config);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Skill_Config other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Faction != other.Faction) return false;
      if (Type != other.Type) return false;
      if (Rank != other.Rank) return false;
      if(!element_.Equals(other.element_)) return false;
      if (Name != other.Name) return false;
      if (ActiveType != other.ActiveType) return false;
      if (Icon != other.Icon) return false;
      if (Desc != other.Desc) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Faction != 0) hash ^= Faction.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Rank != 0) hash ^= Rank.GetHashCode();
      hash ^= element_.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (ActiveType != 0) hash ^= ActiveType.GetHashCode();
      if (Icon.Length != 0) hash ^= Icon.GetHashCode();
      if (Desc.Length != 0) hash ^= Desc.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Faction != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Faction);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Type);
      }
      if (Rank != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Rank);
      }
      element_.WriteTo(output, _repeated_element_codec);
      if (Name.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Name);
      }
      if (ActiveType != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(ActiveType);
      }
      if (Icon.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Icon);
      }
      if (Desc.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Desc);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Faction != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Faction);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Rank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rank);
      }
      size += element_.CalculateSize(_repeated_element_codec);
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (ActiveType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActiveType);
      }
      if (Icon.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Icon);
      }
      if (Desc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Desc);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Skill_Config other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Faction != 0) {
        Faction = other.Faction;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Rank != 0) {
        Rank = other.Rank;
      }
      element_.Add(other.element_);
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.ActiveType != 0) {
        ActiveType = other.ActiveType;
      }
      if (other.Icon.Length != 0) {
        Icon = other.Icon;
      }
      if (other.Desc.Length != 0) {
        Desc = other.Desc;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Faction = input.ReadInt32();
            break;
          }
          case 24: {
            Type = input.ReadInt32();
            break;
          }
          case 32: {
            Rank = input.ReadInt32();
            break;
          }
          case 42:
          case 40: {
            element_.AddEntriesFrom(input, _repeated_element_codec);
            break;
          }
          case 50: {
            Name = input.ReadString();
            break;
          }
          case 56: {
            ActiveType = input.ReadInt32();
            break;
          }
          case 66: {
            Icon = input.ReadString();
            break;
          }
          case 74: {
            Desc = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Skill_Config_Map : pb::IMessage<Skill_Config_Map> {
    private static readonly pb::MessageParser<Skill_Config_Map> _parser = new pb::MessageParser<Skill_Config_Map>(() => new Skill_Config_Map());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Skill_Config_Map> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Deploy.SkillConfigReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Skill_Config_Map() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Skill_Config_Map(Skill_Config_Map other) : this() {
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Skill_Config_Map Clone() {
      return new Skill_Config_Map(this);
    }

    /// <summary>Field number for the "Items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pbc::MapField<int, global::Deploy.Skill_Config>.Codec _map_items_codec
        = new pbc::MapField<int, global::Deploy.Skill_Config>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::Deploy.Skill_Config.Parser), 10);
    private readonly pbc::MapField<int, global::Deploy.Skill_Config> items_ = new pbc::MapField<int, global::Deploy.Skill_Config>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::Deploy.Skill_Config> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Skill_Config_Map);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Skill_Config_Map other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Items.Equals(other.Items)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Items.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _map_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_map_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Skill_Config_Map other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            items_.AddEntriesFrom(input, _map_items_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
