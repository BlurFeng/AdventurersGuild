// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Entrust_ItemConfig.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Deploy {

  /// <summary>Holder for reflection information generated from Entrust_ItemConfig.proto</summary>
  public static partial class EntrustItemConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for Entrust_ItemConfig.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EntrustItemConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChhFbnRydXN0X0l0ZW1Db25maWcucHJvdG8SBmRlcGxveSLBAwoSRW50cnVz",
            "dF9JdGVtQ29uZmlnEgoKAklkGAEgASgFEg0KBVRpdGxlGAIgASgJEhYKDkRl",
            "c2NyaWJlU2ltcGxlGAMgASgJEhAKCERlc2NyaWJlGAQgASgJEgwKBFR5cGUY",
            "BSABKAUSDAoEUmFuaxgGIAEoBRITCgtSb3VuZHNMaW1pdBgHIAEoBRIZChFS",
            "b3VuZHNDb25zdW1lQmFzZRgIIAEoBRIbChNDYW5UcnlNdWx0aXBsZVRpbWVz",
            "GAkgASgFEhcKD1ZlbnR1cmVyTnVtTXVzdBgKIAEoBRIbChNWZW50dXJlck51",
            "bU9wdGlvbmFsGAsgASgFEg4KBlNpbmdsZRgMIAEoBRIXCg9Qcm9iYWJpbGl0",
            "eUJhc2UYDSABKAUSDgoGV2VpZ2h0GA4gASgFEkIKDENvbmRpdGlvbk1hcBgP",
            "IAMoCzIsLmRlcGxveS5FbnRydXN0X0l0ZW1Db25maWcuQ29uZGl0aW9uTWFw",
            "RW50cnkSFQoNSW5jaWRlbnRQYWNrcxgQIAMoCRozChFDb25kaXRpb25NYXBF",
            "bnRyeRILCgNrZXkYASABKAUSDQoFdmFsdWUYAiABKAk6AjgBIpwBChZFbnRy",
            "dXN0X0l0ZW1Db25maWdfTWFwEjgKBUl0ZW1zGAEgAygLMikuZGVwbG95LkVu",
            "dHJ1c3RfSXRlbUNvbmZpZ19NYXAuSXRlbXNFbnRyeRpICgpJdGVtc0VudHJ5",
            "EgsKA2tleRgBIAEoBRIpCgV2YWx1ZRgCIAEoCzIaLmRlcGxveS5FbnRydXN0",
            "X0l0ZW1Db25maWc6AjgBYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Deploy.Entrust_ItemConfig), global::Deploy.Entrust_ItemConfig.Parser, new[]{ "Id", "Title", "DescribeSimple", "Describe", "Type", "Rank", "RoundsLimit", "RoundsConsumeBase", "CanTryMultipleTimes", "VenturerNumMust", "VenturerNumOptional", "Single", "ProbabilityBase", "Weight", "ConditionMap", "IncidentPacks" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Deploy.Entrust_ItemConfig_Map), global::Deploy.Entrust_ItemConfig_Map.Parser, new[]{ "Items" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, })
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Entrust_ItemConfig : pb::IMessage<Entrust_ItemConfig> {
    private static readonly pb::MessageParser<Entrust_ItemConfig> _parser = new pb::MessageParser<Entrust_ItemConfig>(() => new Entrust_ItemConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Entrust_ItemConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Deploy.EntrustItemConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Entrust_ItemConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Entrust_ItemConfig(Entrust_ItemConfig other) : this() {
      id_ = other.id_;
      title_ = other.title_;
      describeSimple_ = other.describeSimple_;
      describe_ = other.describe_;
      type_ = other.type_;
      rank_ = other.rank_;
      roundsLimit_ = other.roundsLimit_;
      roundsConsumeBase_ = other.roundsConsumeBase_;
      canTryMultipleTimes_ = other.canTryMultipleTimes_;
      venturerNumMust_ = other.venturerNumMust_;
      venturerNumOptional_ = other.venturerNumOptional_;
      single_ = other.single_;
      probabilityBase_ = other.probabilityBase_;
      weight_ = other.weight_;
      conditionMap_ = other.conditionMap_.Clone();
      incidentPacks_ = other.incidentPacks_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Entrust_ItemConfig Clone() {
      return new Entrust_ItemConfig(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Title" field.</summary>
    public const int TitleFieldNumber = 2;
    private string title_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DescribeSimple" field.</summary>
    public const int DescribeSimpleFieldNumber = 3;
    private string describeSimple_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DescribeSimple {
      get { return describeSimple_; }
      set {
        describeSimple_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Describe" field.</summary>
    public const int DescribeFieldNumber = 4;
    private string describe_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Describe {
      get { return describe_; }
      set {
        describe_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 5;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "Rank" field.</summary>
    public const int RankFieldNumber = 6;
    private int rank_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    /// <summary>Field number for the "RoundsLimit" field.</summary>
    public const int RoundsLimitFieldNumber = 7;
    private int roundsLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoundsLimit {
      get { return roundsLimit_; }
      set {
        roundsLimit_ = value;
      }
    }

    /// <summary>Field number for the "RoundsConsumeBase" field.</summary>
    public const int RoundsConsumeBaseFieldNumber = 8;
    private int roundsConsumeBase_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoundsConsumeBase {
      get { return roundsConsumeBase_; }
      set {
        roundsConsumeBase_ = value;
      }
    }

    /// <summary>Field number for the "CanTryMultipleTimes" field.</summary>
    public const int CanTryMultipleTimesFieldNumber = 9;
    private int canTryMultipleTimes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CanTryMultipleTimes {
      get { return canTryMultipleTimes_; }
      set {
        canTryMultipleTimes_ = value;
      }
    }

    /// <summary>Field number for the "VenturerNumMust" field.</summary>
    public const int VenturerNumMustFieldNumber = 10;
    private int venturerNumMust_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VenturerNumMust {
      get { return venturerNumMust_; }
      set {
        venturerNumMust_ = value;
      }
    }

    /// <summary>Field number for the "VenturerNumOptional" field.</summary>
    public const int VenturerNumOptionalFieldNumber = 11;
    private int venturerNumOptional_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VenturerNumOptional {
      get { return venturerNumOptional_; }
      set {
        venturerNumOptional_ = value;
      }
    }

    /// <summary>Field number for the "Single" field.</summary>
    public const int SingleFieldNumber = 12;
    private int single_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Single {
      get { return single_; }
      set {
        single_ = value;
      }
    }

    /// <summary>Field number for the "ProbabilityBase" field.</summary>
    public const int ProbabilityBaseFieldNumber = 13;
    private int probabilityBase_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ProbabilityBase {
      get { return probabilityBase_; }
      set {
        probabilityBase_ = value;
      }
    }

    /// <summary>Field number for the "Weight" field.</summary>
    public const int WeightFieldNumber = 14;
    private int weight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Weight {
      get { return weight_; }
      set {
        weight_ = value;
      }
    }

    /// <summary>Field number for the "ConditionMap" field.</summary>
    public const int ConditionMapFieldNumber = 15;
    private static readonly pbc::MapField<int, string>.Codec _map_conditionMap_codec
        = new pbc::MapField<int, string>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForString(18, ""), 122);
    private readonly pbc::MapField<int, string> conditionMap_ = new pbc::MapField<int, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, string> ConditionMap {
      get { return conditionMap_; }
    }

    /// <summary>Field number for the "IncidentPacks" field.</summary>
    public const int IncidentPacksFieldNumber = 16;
    private static readonly pb::FieldCodec<string> _repeated_incidentPacks_codec
        = pb::FieldCodec.ForString(130);
    private readonly pbc::RepeatedField<string> incidentPacks_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> IncidentPacks {
      get { return incidentPacks_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Entrust_ItemConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Entrust_ItemConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Title != other.Title) return false;
      if (DescribeSimple != other.DescribeSimple) return false;
      if (Describe != other.Describe) return false;
      if (Type != other.Type) return false;
      if (Rank != other.Rank) return false;
      if (RoundsLimit != other.RoundsLimit) return false;
      if (RoundsConsumeBase != other.RoundsConsumeBase) return false;
      if (CanTryMultipleTimes != other.CanTryMultipleTimes) return false;
      if (VenturerNumMust != other.VenturerNumMust) return false;
      if (VenturerNumOptional != other.VenturerNumOptional) return false;
      if (Single != other.Single) return false;
      if (ProbabilityBase != other.ProbabilityBase) return false;
      if (Weight != other.Weight) return false;
      if (!ConditionMap.Equals(other.ConditionMap)) return false;
      if(!incidentPacks_.Equals(other.incidentPacks_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (DescribeSimple.Length != 0) hash ^= DescribeSimple.GetHashCode();
      if (Describe.Length != 0) hash ^= Describe.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Rank != 0) hash ^= Rank.GetHashCode();
      if (RoundsLimit != 0) hash ^= RoundsLimit.GetHashCode();
      if (RoundsConsumeBase != 0) hash ^= RoundsConsumeBase.GetHashCode();
      if (CanTryMultipleTimes != 0) hash ^= CanTryMultipleTimes.GetHashCode();
      if (VenturerNumMust != 0) hash ^= VenturerNumMust.GetHashCode();
      if (VenturerNumOptional != 0) hash ^= VenturerNumOptional.GetHashCode();
      if (Single != 0) hash ^= Single.GetHashCode();
      if (ProbabilityBase != 0) hash ^= ProbabilityBase.GetHashCode();
      if (Weight != 0) hash ^= Weight.GetHashCode();
      hash ^= ConditionMap.GetHashCode();
      hash ^= incidentPacks_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Title);
      }
      if (DescribeSimple.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DescribeSimple);
      }
      if (Describe.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Describe);
      }
      if (Type != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Type);
      }
      if (Rank != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Rank);
      }
      if (RoundsLimit != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(RoundsLimit);
      }
      if (RoundsConsumeBase != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(RoundsConsumeBase);
      }
      if (CanTryMultipleTimes != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(CanTryMultipleTimes);
      }
      if (VenturerNumMust != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(VenturerNumMust);
      }
      if (VenturerNumOptional != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(VenturerNumOptional);
      }
      if (Single != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(Single);
      }
      if (ProbabilityBase != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(ProbabilityBase);
      }
      if (Weight != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(Weight);
      }
      conditionMap_.WriteTo(output, _map_conditionMap_codec);
      incidentPacks_.WriteTo(output, _repeated_incidentPacks_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (DescribeSimple.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DescribeSimple);
      }
      if (Describe.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Describe);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Rank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rank);
      }
      if (RoundsLimit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoundsLimit);
      }
      if (RoundsConsumeBase != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoundsConsumeBase);
      }
      if (CanTryMultipleTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanTryMultipleTimes);
      }
      if (VenturerNumMust != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VenturerNumMust);
      }
      if (VenturerNumOptional != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VenturerNumOptional);
      }
      if (Single != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Single);
      }
      if (ProbabilityBase != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ProbabilityBase);
      }
      if (Weight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Weight);
      }
      size += conditionMap_.CalculateSize(_map_conditionMap_codec);
      size += incidentPacks_.CalculateSize(_repeated_incidentPacks_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Entrust_ItemConfig other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      if (other.DescribeSimple.Length != 0) {
        DescribeSimple = other.DescribeSimple;
      }
      if (other.Describe.Length != 0) {
        Describe = other.Describe;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Rank != 0) {
        Rank = other.Rank;
      }
      if (other.RoundsLimit != 0) {
        RoundsLimit = other.RoundsLimit;
      }
      if (other.RoundsConsumeBase != 0) {
        RoundsConsumeBase = other.RoundsConsumeBase;
      }
      if (other.CanTryMultipleTimes != 0) {
        CanTryMultipleTimes = other.CanTryMultipleTimes;
      }
      if (other.VenturerNumMust != 0) {
        VenturerNumMust = other.VenturerNumMust;
      }
      if (other.VenturerNumOptional != 0) {
        VenturerNumOptional = other.VenturerNumOptional;
      }
      if (other.Single != 0) {
        Single = other.Single;
      }
      if (other.ProbabilityBase != 0) {
        ProbabilityBase = other.ProbabilityBase;
      }
      if (other.Weight != 0) {
        Weight = other.Weight;
      }
      conditionMap_.Add(other.conditionMap_);
      incidentPacks_.Add(other.incidentPacks_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Title = input.ReadString();
            break;
          }
          case 26: {
            DescribeSimple = input.ReadString();
            break;
          }
          case 34: {
            Describe = input.ReadString();
            break;
          }
          case 40: {
            Type = input.ReadInt32();
            break;
          }
          case 48: {
            Rank = input.ReadInt32();
            break;
          }
          case 56: {
            RoundsLimit = input.ReadInt32();
            break;
          }
          case 64: {
            RoundsConsumeBase = input.ReadInt32();
            break;
          }
          case 72: {
            CanTryMultipleTimes = input.ReadInt32();
            break;
          }
          case 80: {
            VenturerNumMust = input.ReadInt32();
            break;
          }
          case 88: {
            VenturerNumOptional = input.ReadInt32();
            break;
          }
          case 96: {
            Single = input.ReadInt32();
            break;
          }
          case 104: {
            ProbabilityBase = input.ReadInt32();
            break;
          }
          case 112: {
            Weight = input.ReadInt32();
            break;
          }
          case 122: {
            conditionMap_.AddEntriesFrom(input, _map_conditionMap_codec);
            break;
          }
          case 130: {
            incidentPacks_.AddEntriesFrom(input, _repeated_incidentPacks_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Entrust_ItemConfig_Map : pb::IMessage<Entrust_ItemConfig_Map> {
    private static readonly pb::MessageParser<Entrust_ItemConfig_Map> _parser = new pb::MessageParser<Entrust_ItemConfig_Map>(() => new Entrust_ItemConfig_Map());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Entrust_ItemConfig_Map> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Deploy.EntrustItemConfigReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Entrust_ItemConfig_Map() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Entrust_ItemConfig_Map(Entrust_ItemConfig_Map other) : this() {
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Entrust_ItemConfig_Map Clone() {
      return new Entrust_ItemConfig_Map(this);
    }

    /// <summary>Field number for the "Items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pbc::MapField<int, global::Deploy.Entrust_ItemConfig>.Codec _map_items_codec
        = new pbc::MapField<int, global::Deploy.Entrust_ItemConfig>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::Deploy.Entrust_ItemConfig.Parser), 10);
    private readonly pbc::MapField<int, global::Deploy.Entrust_ItemConfig> items_ = new pbc::MapField<int, global::Deploy.Entrust_ItemConfig>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::Deploy.Entrust_ItemConfig> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Entrust_ItemConfig_Map);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Entrust_ItemConfig_Map other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Items.Equals(other.Items)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Items.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _map_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_map_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Entrust_ItemConfig_Map other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            items_.AddEntriesFrom(input, _map_items_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
